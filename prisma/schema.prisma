// This is your Prisma schemas file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  user
  admin
}

enum Size {
  XS
  S
  M
  L
  XL
  XXL
}

enum Type {
  reguler
  custom
}

enum Status {
  pending 
  processing 
  success 
  failed
}

model users {
  id       Int    @id @default(autoincrement())
  role     Role   @default(user)
  name     String
  username String @unique
  password String

  address  addresses[]
  checkout checkouts[]
  chats    chats[]
  review   review[]
}

model addresses {
  id               Int    @id @default(autoincrement())
  address          String
  zip_code         Int
  destination_code String
  receiver_area    String
  user_id          Int

  checkout checkouts[]

  user users @relation(fields: [user_id], references: [id])
}

model products {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  quantity    Int
  price       Int
  weight      Int
  created_at  DateTime @default(now())

  product_images   product_images[]
  product_category product_category[]
  product_size     product_size[]
  product_checkout product_checkout[]
  review           review[]
}

model product_images {
  id         Int    @id @default(autoincrement())
  image_path String
  product_id Int

  product products @relation(fields: [product_id], references: [id])
}

model product_category {
  id          Int @id @default(autoincrement())
  product_id  Int
  category_id Int

  product  products   @relation(fields: [product_id], references: [id])
  category categories @relation(fields: [category_id], references: [id])
}

model categories {
  id       Int    @id @default(autoincrement())
  category String @unique

  product_category product_category[]
}

model product_size {
  id         Int @id @default(autoincrement())
  product_id Int
  size_id    Int

  product products @relation(fields: [product_id], references: [id])
  size    size     @relation(fields: [size_id], references: [id])
}

model size {
  id           Int            @id @default(autoincrement())
  size         Size           @unique
  product_size product_size[]
}

model product_checkout {
  id             Int             @id @default(autoincrement())
  quantity       Int
  size           Size
  color          String
  type           Type
  price          Int
  product_id     Int
  checkout_id    Int
  product_custom product_custom?

  product  products  @relation(fields: [product_id], references: [id])
  checkout checkouts @relation(fields: [checkout_id], references: [id])
}

model product_custom {
  id               Int    @id @default(autoincrement())
  front_image_path String
  back_image_path  String
  front_width      Int
  back_width       Int
  product_id       Int    @unique

  custom product_checkout @relation(fields: [product_id], references: [id])
}

model checkouts {
  id          Int      @id @default(autoincrement())
  order_id    String   @unique
  status      Status   @default(pending)
  total_price Int
  user_id     Int
  address_id  Int
  snap_token String?
  created_at  DateTime @default(now())

  product_checkout product_checkout[]
  delivery         deliveries?

  user    users     @relation(fields: [user_id], references: [id])
  address addresses @relation(fields: [address_id], references: [id])
}

model deliveries {
  id              Int      @id @default(autoincrement())
  send_start_time DateTime?
  send_end_time   DateTime?
  checkout_id     Int      @unique
  status          delivery_status[]

  checkout checkouts @relation(fields: [checkout_id], references: [id])
}

model delivery_status {
  id            Int    @id @default(autoincrement())
  status        String?
  deliveries_id Int

  deliveries deliveries @relation(fields: [deliveries_id], references: [id])
}

model review {
  id         Int      @id @default(autoincrement())
  star       Int
  comment    String
  user_id    Int
  product_id Int
  created_at DateTime @default(now())

  user    users    @relation(fields: [user_id], references: [id])
  product products @relation(fields: [product_id], references: [id])
}

model chats {
  id           Int      @id @default(autoincrement())
  message      String
  user_id      Int
  admin_id     Int
  chat_user_id Int
  created_at   DateTime @default(now())

  user users @relation(fields: [user_id], references: [id])
}
